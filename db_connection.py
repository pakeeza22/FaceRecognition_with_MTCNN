import psycopg2
from datetime import datetime
import os

now = datetime.now()

def connect_db():
    try:
            conn = psycopg2.connect(
                host='localhost',
                dbname='face_recognition_dataset',
                user= os.environ[USER'],
                password= os.environ['PASSWORD'],
                port=5432
            )
            cur = conn.cursor()
            print('connect')

            # conn.commit()
            return conn,cur
            # self.conn.close()
    except Exception as e:
        print(f"not connect\n{e}")
        return e

def create_table(conn,cur):
    try:
        create_query = """
                        CREATE TABLE IF NOT EXISTS person_info(
                        id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
                        class_name character varying(70) COLLATE pg_catalog."default" NOT NULL,
                        CONSTRAINT person_info_pkey PRIMARY KEY (id),
                        CONSTRAINT class_name UNIQUE (class_name),
	                    created_at DATE NOT NULL DEFAULT CURRENT_DATE
                        )
                        """
        cur.execute(create_query)
        conn.commit()
    except Exception as e:
        print(e)
        return e
    
    try:
        create_query = """
                        CREATE TABLE IF NOT EXISTS train_images
                            (
                                img_id integer NOT NULL,
                                image character varying(255) NOT NULL,
                                CONSTRAINT img_id FOREIGN KEY (img_id)
                                    REFERENCES public.person_info (id) MATCH SIMPLE
                                    ON UPDATE NO ACTION
                                    ON DELETE NO ACTION
                                    NOT VALID
                            )
                        """
        cur.execute(create_query)
        conn.commit()
    except Exception as e:
        print(e)
        return e

    try:
        create_query = """
                        CREATE TABLE IF NOT EXISTS test_images
                            (
                                img_id integer NOT NULL,
                                image character varying(255) NOT NULL,
                                CONSTRAINT img_id FOREIGN KEY (img_id)
                                    REFERENCES public.person_info (id) MATCH SIMPLE
                                    ON UPDATE NO ACTION
                                    ON DELETE NO ACTION
                                    NOT VALID
                            )
                        """
        cur.execute(create_query)
        conn.commit()
        return None
    except Exception as e:
        print(e)
        return e   
    

def insert_into_person_info(cur, username, userid):
    try:
        create_query = """INSERT INTO person_info 
                        (id,class_name)
                        VALUES (%s,%s)
                        """
        record_to_insert = (userid,username)
        cur.execute(create_query, record_to_insert)
        return True,"successfully inserted data!!"
    except Exception as e:
        print("Inserting Error in person_info: ",e)
        return False,"Inserting Error: "+ str(e)

def insert_into_train_images(cur,  path, userid):
    try:
        create_query = """INSERT INTO train_images 
                        (img_id,image)
                        VALUES (%s,%s)
                        """
        record_to_insert = (userid,path)
        cur.execute(create_query, record_to_insert)
        return "successfully inserted data!!"
        # conn.commit()
    except Exception as e:
        print("Inserting Error in train_images: ",e)
        return "Inserting Error: "+str(e)

def insert_into_test_images(conn,cur,  path, userid):
    try:
        create_query = """INSERT INTO test_images 
                        (img_id,image)
                        VALUES (%s,%s)
                        """
        record_to_insert = (userid,path)
        cur.execute(create_query, record_to_insert)
        conn.commit()
        return "successfully inserted data!!"
    except Exception as e:
        print("Inserting Error in test_images: ",e)
        return "Inserting Error: "+str(e)

def check_userid(conn,cur):
    try:
        create_query = """ 
                       SELECT COUNT(*) FROM person_info
                    """
        cur.execute(create_query)
        user_id = cur.fetchall()

        conn.commit()
        return user_id
    except Exception as e:
        print(e)

def create_person_history(conn,cur):
    try:
        create_query = """
                        CREATE TABLE IF NOT EXISTS person_history
                            (
                                user_id integer NOT NULL,
                                date DATE NOT NULL DEFAULT CURRENT_DATE,
                                checkin time without time zone,
                                checkout time without time zone,
                                CONSTRAINT user_id FOREIGN KEY (user_id)
                                    REFERENCES public.person_info (id) MATCH SIMPLE
                                    ON UPDATE NO ACTION
                                    ON DELETE NO ACTION
                                    NOT VALID
                            )
                        """
        cur.execute(create_query)
        conn.commit()
        return None
    except Exception as e:
        print(e)

def insert_info(conn,cur,userid,time):
    try:
        current_time = now.strftime("%H:%M:%S")
        if time == 0:
            
            create_query = """INSERT INTO person_history 
                            (user_id,checkin)
                            VALUES (%s,%s)
                            """
        elif time == 1:
             create_query = """INSERT INTO person_history 
                            (user_id,checkout)
                            VALUES (%s,%s)
                            """
        record_to_insert = (userid,current_time)
        cur.execute(create_query, record_to_insert)
        conn.commit()
        return "successfully inserted data!!"
    except Exception as e:
        print("Inserting Error in test_images: ",e)
        return "Inserting Error: "+str(e)

def get_userid(conn,cur,username):
    try:
        create_query = """ 
                       SELECT id FROM person_info WHERE class_name LIKE %s
                    """
        
        record_to_insert = (username,)
        cur.execute(create_query, record_to_insert)
        user_id = cur.fetchall()
        conn.commit()
        return user_id
    except Exception as e:
        print(e)
        return e

def get_train_img_data(conn,cur):
    try:
        create_query = """ 
                       SELECT image FROM train_images
                    """
        cur.execute(create_query)
        train_images = cur.fetchall()
        conn.commit()
        return train_images
    except Exception as e:
        print(e)
        return e

def get_test_img_data(conn,cur):
    try:
        create_query = """ 
                       SELECT image FROM test_images
                    """
        cur.execute(create_query)
        test_images = cur.fetchall()
        conn.commit()
        return test_images
    except Exception as e:
        print(e)
        return e

def compare_person_time(conn,cur,userid):
    try:

        date = now.strftime("%Y-%m-%d")
        create_query = """ 
                       SELECT checkin,checkout FROM person_history WHERE user_id = %s AND date = %s
                    """
        
        record_to_insert = (userid,date)
        cur.execute(create_query, record_to_insert)
        history = cur.fetchall()
        conn.commit()
        return history
    except Exception as e:
        print(e)
        return e

def search_and_insert_info(conn,cur,userid,time):
    try:

        date = now.strftime("%Y-%m-%d")
        current_time = now.strftime("%H:%M:%S")
        if time == 0:
            
            create_query = f"UPDATE person_history SET checkin = '{current_time}' WHERE(user_id={userid} AND date = '{date}');"
        elif time == 1:
            create_query = f"UPDATE person_history SET checkout = '{current_time}' WHERE(user_id={userid} AND date = '{date}');"
        #     create_query = """UPDATE person_history 
        #                     SET checkout = %s
        #                     WHERE user_id = %s AND date = %s
        #                     """
        # record_to_insert = (current_time,userid,date)
        cur.execute(create_query)
        conn.commit()
        history = cur.fetchall()
        return history
    except Exception as e:
        print(e)
        return e

def get_user_info(conn,cur,username):
    try:
        create_query = """ 
                       SELECT * FROM person_info WHERE class_name LIKE %s
                    """
        
        record_to_insert = (username,)
        cur.execute(create_query, record_to_insert)
        user_data = cur.fetchall()
        conn.commit()
        return user_data
    except Exception as e:
        print(e)
        return e

def get_user_history(conn,cur,userid):
    try:
        create_query = """ 
                       SELECT * FROM person_history WHERE user_id = %s
                    """
        
        record_to_insert = (userid,)
        cur.execute(create_query, record_to_insert)
        user_data = cur.fetchall()
        conn.commit()
        return user_data
    except Exception as e:
        print(e)
        return e